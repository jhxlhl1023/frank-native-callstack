import CallItem from "../callitem/CallItem_Type";
declare const CallItem: any;
import { CallObject } from "./CallObject";
declare const _default: {
    new (): {
        lastItem: () => CallItem | null;
        val: (variKey: string) => any;
        append: (key: string | CallItem | CallObject | null, methodCall?: ((...args: any) => void) | undefined, paramsCall?: (() => any[]) | undefined) => any;
        next: (key: string | CallItem | CallObject, methodCall?: ((...args: any) => void) | undefined, paramsCall?: (() => any[]) | undefined) => any;
        loop: (loopCall: () => boolean, loopFrom: () => CallItem) => any;
        sleep: (msec: number) => any;
        markAs: (mark: string) => any;
        findMark: (mark: string) => CallItem;
        success(succ: (o: any) => void): any;
        success(): (o: any) => void;
        error(err: (o: Error) => void): any;
        error(): (o: Error) => void;
        complete(comp: (o: any) => void): any;
        complete(): (o: any) => void;
        execute: () => void;
    };
    currentCallStack(): {
        lastItem: () => CallItem | null;
        val: (variKey: string) => any;
        append: (key: string | CallItem | CallObject | null, methodCall?: ((...args: any) => void) | undefined, paramsCall?: (() => any[]) | undefined) => any;
        next: (key: string | CallItem | CallObject, methodCall?: ((...args: any) => void) | undefined, paramsCall?: (() => any[]) | undefined) => any;
        loop: (loopCall: () => boolean, loopFrom: () => CallItem) => any;
        sleep: (msec: number) => any;
        markAs: (mark: string) => any;
        findMark: (mark: string) => CallItem;
        success(succ: (o: any) => void): any;
        success(): (o: any) => void;
        error(err: (o: Error) => void): any;
        error(): (o: Error) => void;
        complete(comp: (o: any) => void): any;
        complete(): (o: any) => void;
        execute: () => void;
    } | null;
};
export = _default;
